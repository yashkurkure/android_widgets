<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.yash.examples.flutter.launch_flutter_screen_widget">
   <application
        android:label="launch_flutter_screen_widget"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <!-- Displays an Android View that continues showing the launch screen
                 Drawable until Flutter paints its first frame, then this splash
                 screen fades out. A splash screen is useful to avoid any visual
                 gap between the end of Android's launch screen and the painting of
                 Flutter's first frame. -->
            <meta-data
              android:name="io.flutter.embedding.android.SplashScreenDrawable"
              android:resource="@drawable/launch_background"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />


       <!--First, we need to declare the widget in the manifest-->
       <!--
       Notes:
           android:name here specifies the AppWidgetProvider class used by the widget. In this app's case the
           name of the AppWidgetProvider is ExampleAppWidgetProvider.

       See file
           ExampleAppWidgetProvider.java
       -->
       <receiver
           android:name="ExampleAppWidgetProvider"
           android:exported="false">

           <intent-filter>
               <!--The action element's name attribute specifies that our BroadCast receiver accepts the ACTION_APPWIDGET_UPDATE broadcast-->
               <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
           </intent-filter>

           <!--
           Notes:
               The meta-data specifies the AppWidgetProviderInfo xml resource using the android:resource attribute
               The name attribute helps identify the data as AppWidgetProviderInfo, in this case we need to set it to android.appwidget.provider
           -->
           <meta-data android:name = "android.appwidget.provider"
               android:resource="@xml/example_appwidget_info" />

       </receiver>



    </application>
</manifest>
